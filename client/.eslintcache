[{"/Users/luis/GA/unit2/project/portfolio-host/client/src/index.js":"1","/Users/luis/GA/unit2/project/portfolio-host/client/src/httpRequest.js":"2","/Users/luis/GA/unit2/project/portfolio-host/client/src/App.js":"3","/Users/luis/GA/unit2/project/portfolio-host/client/src/pages/PortfolioPage.js":"4","/Users/luis/GA/unit2/project/portfolio-host/client/src/pages/SignInSignUp.js":"5","/Users/luis/GA/unit2/project/portfolio-host/client/src/pages/LandingPage.js":"6"},{"size":395,"mtime":1607283913805,"results":"7","hashOfConfig":"8"},{"size":10612,"mtime":1607283913818,"results":"9","hashOfConfig":"8"},{"size":1529,"mtime":1607283913803,"results":"10","hashOfConfig":"8"},{"size":0,"mtime":1607118398157,"results":"11","hashOfConfig":"8"},{"size":2711,"mtime":1607283913806,"results":"12","hashOfConfig":"8"},{"size":4267,"mtime":1607283913806,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16","usedDeprecatedRules":"17"},"1isttl4",{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"17"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"17"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"31"},"/Users/luis/GA/unit2/project/portfolio-host/client/src/index.js",["32"],"import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\nimport App from \"./App\"\nconst {httpRequest, post, get, put, del} = require(\"./httpRequest.js\")\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App props={httpRequest, post, get, put, del}/>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n)",["33","34"],"/Users/luis/GA/unit2/project/portfolio-host/client/src/httpRequest.js",["35"],"import axios from 'axios'\nconst ApiClient = axios.create({ baseURL: 'http://localhost:3003/api/' })\nexport const {post, get, put} = ApiClient \nexport const del = (path) => ApiClient.delete(path)\n\n\n\n// uncomment when AUTH is ready\n// ApiClient.interceptors.request.use(\n//     async (config) => {\n//     const token = localStorage.getItem('token')\n//     if (token) {\n//         config.headers.Authorization = `Bearer ${token}`\n//     }\n//     return config\n//     },\n//     (err) => Promise.reject(err)\n// )\n\n/**\n * @param {string} routeKey\n * @param {object} payload   // payload => {body:{title: \"project title\"}, params:{\"/:user_id/:project_id\"}}\n * @param {array} dataRequest\n */\nexport const httpRequest = (routeKey, payload, dataRequest) => {\n    const valueIfExists = (variableToCheck, valueIfExists, valueIfNot) => variableToCheck !== \"undefined\" ? valueIfExists : (valueIfNot !== \"undefined\" ? valueIfNot : null)\n    const {body} = valueIfExists(payload.body, payload.body, {})\n    const params = valueIfExists(payload.params, payload.params, \"\")\n    const userRequestedData = valueIfExists(dataRequest, true, false)\n    // each key of the route object shares its name with the controller at the end of the route\n    const route = {\n        login: post(`UserRouter/login${params}`, body),\n        createUser: post(`UserRouter/create${params}`, body), \n        readUser: get(`UserRouter/read${params}`, body),\n        updateUser: put(`UserRouter/update${params}`, body), \n        deleteUser: del(`UserRouter/delete${params}`, body),\n    \n        createProfile: post(`profiles/create${params}`, body),\n        readProfile: get(`profiles/read${params}`, body), \n        ReadAllProfiles: get(`profiles/read${params}`, body), \n        updateProfile: put(`profiles/update${params}`, body), \n        deleteProfile: del(`profiles/delete${params}`, body), \n    \n        createProject: post(`UserRouter/create${params}`, body),\n        readProject: get(`UserRouter/read${params}`, body),  \n        updateProject: put(`UserRouter/update${params}`, body), \n        deleteProject: del(`UserRouter/delete${params}`, body)\n    }\n    try {\n        const response = () => async () => await route[routeKey]()\n        console.log(response)\n        // const keys = Object.keys(response)\n        // ==> [\"key\", \"key\" , \"key\", \"key\"]  desired by user\n        // keys.map((key) => )\n        \n        // \n        // const dataToReturn = userRequestedData ? Object.entries(response).filter([k,v] =>  ) dataRequest.forEach\n        return response\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n// const [loginInformation, setLoginInfo] = useState({})\n// const [isUserLoggedIn, setLoginStatus] = useState({})\n\n// <button onClick={()=>setLoginStatus(httpRequest(\"login\", loginInformation, [\"isUserLoggedIn\"]))}></button>\n\n// httpRequest(\"login\",{})\n\n// extractResponse({username: usernameField, password: passField}).data.loggedIn\n// setLoggedIn(extractResponse({username: usernameField, password: passField}).data.loggedIn)\n\n// <button onClick={()=> setLoggedIn(((()=>httpRequest(\"User\", props.post, \"login\", {username: \"collin\", password: \"pass\"})).userLoggedIn))}></button>\n\n\n\n    // const c = crudMethod, m = model, p = payload, report = {c:c, m:m, p:p}, log = (report) => console.log(`Request arrived in Server.js => table: ${report.m} => method: '${report.c}' carrying payload: `, report.p)\n    // const {post, get, put, delete} = ApiClient \n\n// example: httpRequest(\"User\", props.post, \"login\", {username: \"collin\", password: \"pass\"})\n    \n\n\n// /**\n//  * @param {object} payload\n//  */\n\n// const httpRequest = async (Model, AxiosMethod, crudMethod, payload) => await AxiosMethod(`${Model}Router/${crudMethod}/`)\n// const extractResponse = (payload) => httpRequest(rteLogin, payload)\n// extractResponse({username: usernameField, password: passField}).data.loggedIn\n// setLoggedIn(extractResponse({username: usernameField, password: passField}).data.loggedIn)\n\n\n\n\n\n\n    // export default httpRequest = async (AxiosMethod, crudMethod, model,  payload) => {\n\n   //    'ProjectRouter/\n\n// const crudSwitch = (model, crudMethod) => {\n//     switch (crudMethod) {\n//         case \"create\":\n//             log(report)\n//             await ApiClient.post(`/UserRouter/create/`)\n//             break\n//         case \"login\":\n//             log(report)\n//             await ApiClient.post(`/UserRouter/login/`)\n//             break\n//         case \"read\":\n//             log(report)\n//             await ApiClient.read(`/UserRouter/login/`)\n//             break\n//         case \"update\":\n//             log(report)\n//             await ApiClient.put(`/UserRouter/login/`)\n//             break\n//         case \"delete\":\n//             log(report)\n//             await ApiClient.delete(`/UserRouter/login/`)\n//             break\n//     }\n//     break\n// }\n\n// case \"User\":\n//     crudSwitch(\"User\")\n// case \"Profile\":\n//     crudSwitch(\"Profile\")\n// case \"Project\":\n//     crudSwitch(\"Project\")\n// }\n\n\n\n\n\n\n\n\n//     switch (model) {\n//         case \"User\":\n//             switch (crudMethod) {\n//                 case \"create\":\n//                     log(report)\n//                     await ApiClient.post(`/UserRouter/create/`)\n//                     break\n//                 case \"login\":\n//                     log(report)\n//                     await ApiClient.post(`/UserRouter/login/`)\n//                     break\n//                 case \"read\":\n//                     log(report)\n//                     await ApiClient.read(`/UserRouter/login/`)\n//                     break\n//                 case \"update\":\n//                     log(report)\n//                     await ApiClient.put(`/UserRouter/login/`)\n//                     break\n//                 case \"delete\":\n//                     log(report)\n//                     await ApiClient.delete(`/UserRouter/login/`)\n//                     break\n//             }\n//             break\n//         case \"Project\":\n//             switch (crudMethod) {\n//                 case \"create\":\n//                     log(report)\n//                     await ApiClient.post(`/UserRouter/create/`)\n//                     break\n//                 case \"read\":\n//                     log(report)\n//                     await ApiClient.read(`/UserRouter/login/`)\n//                     break\n//                 case \"update\":\n//                     log(report)\n//                     await ApiClient.put(`/UserRouter/login/`)\n//                     break\n//                 case \"delete\":\n//                     log(report)\n//                     await ApiClient.delete(`/UserRouter/login/`)\n//                     break\n//         case \"Profile\":\n//             switch (crudMethod) {\n//                 case \"create\":\n//                     log(report)\n//                     await ApiClient.post(`/UserRouter/create/`)\n//                     break\n//                 case \"read\":\n//                     log(report)\n//                     await ApiClient.read(`/UserRouter/login/`)\n//                     break\n//                 case \"update\":\n//                     log(report)\n//                     await ApiClient.put(`/UserRouter/login/`)\n//                     break\n//                 case \"delete\":\n//                     log(report)\n//                     await ApiClient.delete(`/UserRouter/login/`)\n//                     break\n//         default: \n//             console.log(\"No cases matched. httpRequest() input or switch case name likely mispelled or mismatched.\")\n//     }\n// }\n\n// switch (crudMethod) {\n//             case \"create\":\n//                 log(report)\n//                 await ApiClient.post(`${Model}Router/${crudMethod}/`)\n//                 break\n//             case \"login\":\n//                 log(report)\n//                 await ApiClient.post(`/UserRouter/login/`)\n//                 break\n//             case \"read\":\n//                 log(report)\n//                 await ApiClient.read(`/UserRouter/login/`)\n//                 break\n//             case \"update\":\n//                 log(report)\n//                 await ApiClient.put(`/UserRouter/login/`)\n//                 break\n//             case \"delete\":\n//                 log(report)\n//                 await ApiClient.delete(`/UserRouter/login/`)\n//                 break\n//         }\n//         break\n//     default: \n//         console.log(\"No cases matched. httpRequest() input or switch case name likely mispelled or mismatched.\")\n// }\n// }\n\n    // CRUD REQUESTS AS FOLLOWS: \n\n    // Create: \n    // httpRequest(\"create\", ('Projects' | 'Contributors' | 'Users'), {...field: value, field: value})\n\n    // Read: \n    // httpRequest(\"read\", ('Projects' | 'Contributors' | 'Users'))\n\n    // Update: \n    // httpRequest(\"update\", ('Projects' | 'Contributors' | 'Users'), { newValues: {...field: NEWvalue, field: NEWvalue}, identifier: {field: currentValue}})\n\n    // Delete: \n    // httpRequest(\"update\", ('Projects' | 'Contributors' | 'Users'), {field: identifyingValue})\n\n\n// httpRequest(\"create\", \"Projects\", {\n//     title: \"PROJECT1000\", \n//     description: \"1000\", \n//     deployLink: \"1000\", \n//     repoLink: \"1000\", \n//     technologies: \"1000\", \n//     iframeEnabled: true\n// })\n\n\n// httpRequest(\"update\", \"Projects\", {newValues: {language: \"Ruby\"}, identifier: {language: 'Python'}})\n// httpRequest(\"delete\", \"Projects\", {language: \"Ruby\"})\n\n\n// httpRequest(\"read\", \"Projects\")\n\n\n// httpRequest(\"create\", \"Users\", {\n//     name: \"USER 1\", \n//     email: \"collin@yahoo.com\", \n//     password: \"hi\", \n//     profilepic: \"extremelyhandsome.filehost.com\", \n//     professionalTitle: \"Beast\", \n//     organization: \"Google\", \n//     biography: \"A cool person.\", \n//     locale: \"Chicago\"})\n\n\n// httpRequest(\"update\", \"Users\", {newValues: {email: \"adam@mail.com\"}, identifier: {lastName: 'Honore'}})\n// httpRequest(\"delete\", \"Users\", {lastName: \"Honore\"})\n// httpRequest(\"read\", \"Users\")\n\n\n// httpRequest(\"create\", \"Contributors\", {projectId:4, userId:2, role: \"creator\"})\n// httpRequest(\"update\", \"Contributors\", {newValues: {prompt: \"Fix the for-loop\"}, identifier: {prompt: \"Write a for-loop\"}})\n// httpRequest(\"delete\", \"Contributors\", {prompt: \"Fix the for-loop\"})\n// httpRequest(\"read\", \"Contributors\")\n\n\n// const ContributorsWithCore = async () => {\n//     try {\n//       const Contributors = await Contributors.findAll({\n//         include: [{ model: Cores, as: 'parentCore' }]\n//       })\n//       console.log(Contributors)\n//       return true\n//     } catch (error) {\n//       console.log(error)\n//       return false\n//     }\n//   }\n  \n// ContributorsWithCore()","/Users/luis/GA/unit2/project/portfolio-host/client/src/App.js",["36","37"],"import React, {useEffect, useState } from 'react'\nimport { Switch, Route, withRouter } from 'react-router-dom'\nimport HomePage from \"./pages/LandingPage\"\nimport PortfolioPage from \"./pages/PortfolioPage\"\nimport SignInSignUpPage from \"./pages/SignInSignUp\"\nimport LandingPage from \"./pages/LandingPage\"\n\n// import SignInSignUp from \"./pages/SignInSignUp\"\n// import ProtectedRoute from './components/ProtectedRoute'\n// import Layout from '../src/pages/components/Layout'\n// hello\n\nconst App = (props) => {\n  const [pageIsLoaded, setLoaded] = useState(false)\n\n\n\nconst useEffect = () => {\n  if (!pageIsLoaded) {\n    setLoaded(true)\n  }\n}\n\n\n\n//   goToSignupPage = async (e) => {\n//     e.stopPropagation()\n//     const linkClassName = e.target.className\n//     console.log('Link Class Name :', linkClassName)\n//     await this.setState({loginPageDefault: linkClassName})\n//     await this.props.history.push('/login')\n// }\n\n    return (\n      <main className=\"App\">\n        {pageIsLoaded ? (\n          <div>\n            <h3>Loading...</h3>\n          </div>\n        ) : (\n          <Switch>\n              <Route exact path=\"/\" component={(props) =><LandingPage {...props}/>}/>\n              <Route path=\"/home\" component={(props) => <HomePage {...props}/>}/>\n              <Route path=\"/portfolio\" component={(props) => <PortfolioPage {...props} />}/>\n              <Route path=\"/account\" component={(props) => <SignInSignUpPage {...props}/>}/>\n            </Switch>\n        )}\n      </main>\n    )\n  }\n\nexport default withRouter(App)\n\n","/Users/luis/GA/unit2/project/portfolio-host/client/src/pages/PortfolioPage.js",[],"/Users/luis/GA/unit2/project/portfolio-host/client/src/pages/SignInSignUp.js",[],"/Users/luis/GA/unit2/project/portfolio-host/client/src/pages/LandingPage.js",["38","39","40","41","42","43","44","45","46","47"],"import { Link } from 'react-router-dom'\nimport React, {useState, useEffect} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  textGreeting: {\n    display: \"block\",\n    marginLeft: \"5vw\",\n    alignText: \"left\",\n    welcome: {\n      fontSize: \"35px\"\n    },\n    subHeader: {\n      fontSize: \"20px\"\n    }\n  },\n  httpTest: {\n    margin: \"0 auto\",\n    marginTop: \"70px\",\n    width: \"300px\",\n    height: \"50px\",\n    display: \"flex\", \n    justifyContent: \"spaceBetween\",\n    textfield: {\n      width: \"60%\", \n      height: \"80px\", \n      backgroundColor: \"white\",\n      border: \"1px solid black\"\n    },\n    loginButton: {\n      display: \"block\",\n      margin: \"0 auto\", \n      width: \"80px\", \n      height: \"40px\",\n      fontSize: \"18px\"\n    },\n    submitTestButton: {\n      height: \"80px\",\n      width: \"80px\",\n      color: \"black\",\n      backgroundColor: \"white\"\n    }\n  }\n}));\nconst LandingPage = (props) => {\n  const {httpRequest, get, put, post} = props\n  const classes = useStyles();\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [displayedProfiles, setProfiles] = useState([])\n  const [searchValue, setSearchField] = useState(\"\")\n  const useEffect = () => {\n    // console.log(\"useEffect reached\")\n    // setProfiles(httpRequest(\"ReadAllProfiles\"))\n\n    // const getProfiles = async () => {\n    //   if (!pageIsLoaded) {\n    //     changeLoadedBoolean(true)\n    //   }\n    }\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n\n  return (\n    <div>\n      <div className={classes.root}>\n        <AppBar position=\"static\">\n          <Toolbar>\n            <Button aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick}> Menu </Button>\n            <Menu id=\"simple-menu\" anchorEl={anchorEl} keepMounted open={Boolean(anchorEl)} onClose={handleClose} >\n              <MenuItem onClick={handleClose}> Login </MenuItem>\n              <MenuItem onClick={handleClose}>My account</MenuItem>\n              <MenuItem onClick={handleClose}>Browse developers</MenuItem>\n            </Menu>\n            <Typography variant=\"h6\" className={classes.title}>DevPortal</Typography>\n            {/** LINK TO SignInSignUp page. <Link /> can accept props to send if need be**/}\n            <Link to=\"/account\">\n              <Button color=\"#fce4ec\">Login</Button>\n            </Link>\n          </Toolbar>\n        </AppBar>\n      </div>\n      <div className={classes.textGreeting}>\n        <h3 className={classes.textGreeting.welcome}>Welcome to Dev Ports</h3>\n        <h4 className={classes.textGreeting.subHeader}>Your site to easy share your portfolio and make new connection with other developers.</h4>\n      </div>\n      <Link className={classes.loginButton} to=\"/signInUp\">\n        <Button variant=\"outlined\" color=\"primary\">Login</Button>\n      </Link>\n      <div className={classes.httpTest}>\n        <input className={classes.httpTest.textfield} onChange={(e)=>setSearchField(e.target.value)}></input>\n        <button className={classes.httpTest.submitTestButton} onClick={()=>httpRequest(\"createProfile\", {body:{}} )}>Submit httpRequest</button>\n      </div>\n\n\n    </div>\n  );\n}\n\nexport default LandingPage\n\n// const HomePage = ()  => {\n//   return(\n// <div>\n// <h3>\n//   Welcome to Dev Ports\n// </h3>\n// <h4>\n//   Your site to easy share your portfolio and make new connection with other developers.\n// </h4>\n// <Link to=\"/login\">\n//   <Button variant=\"outlined\" color=\"primary\">\n//     Login\n// </Button>\n// </Link>\n//   <Link to=\"/signup\">\n//     <Button variant=\"outlined\" color=\"primary\">\n//       Sign up\n// </Button>\n//   </Link>\n// </div>\n//   )\n// }\n\n// export default HomePage",["48","49"],{"ruleId":"50","severity":1,"message":"51","line":10,"column":30,"nodeType":"52","messageId":"53","endLine":10,"endColumn":31},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","severity":1,"message":"59","line":29,"column":11,"nodeType":"60","messageId":"61","endLine":29,"endColumn":28},{"ruleId":"58","severity":1,"message":"62","line":1,"column":16,"nodeType":"60","messageId":"61","endLine":1,"endColumn":25},{"ruleId":"58","severity":1,"message":"63","line":18,"column":7,"nodeType":"60","messageId":"61","endLine":18,"endColumn":16},{"ruleId":"58","severity":1,"message":"62","line":2,"column":26,"nodeType":"60","messageId":"61","endLine":2,"endColumn":35},{"ruleId":"58","severity":1,"message":"64","line":8,"column":8,"nodeType":"60","messageId":"61","endLine":8,"endColumn":18},{"ruleId":"58","severity":1,"message":"65","line":9,"column":8,"nodeType":"60","messageId":"61","endLine":9,"endColumn":16},{"ruleId":"58","severity":1,"message":"66","line":63,"column":23,"nodeType":"60","messageId":"61","endLine":63,"endColumn":26},{"ruleId":"58","severity":1,"message":"67","line":63,"column":28,"nodeType":"60","messageId":"61","endLine":63,"endColumn":31},{"ruleId":"58","severity":1,"message":"68","line":63,"column":33,"nodeType":"60","messageId":"61","endLine":63,"endColumn":37},{"ruleId":"58","severity":1,"message":"69","line":66,"column":10,"nodeType":"60","messageId":"61","endLine":66,"endColumn":27},{"ruleId":"58","severity":1,"message":"70","line":66,"column":29,"nodeType":"60","messageId":"61","endLine":66,"endColumn":40},{"ruleId":"58","severity":1,"message":"71","line":67,"column":10,"nodeType":"60","messageId":"61","endLine":67,"endColumn":21},{"ruleId":"58","severity":1,"message":"63","line":68,"column":9,"nodeType":"60","messageId":"61","endLine":68,"endColumn":18},{"ruleId":"54","replacedBy":"72"},{"ruleId":"56","replacedBy":"73"},"no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","no-native-reassign",["74"],"no-negated-in-lhs",["75"],"no-unused-vars","'userRequestedData' is assigned a value but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useEffect' is assigned a value but never used.","'IconButton' is defined but never used.","'MenuIcon' is defined but never used.","'get' is assigned a value but never used.","'put' is assigned a value but never used.","'post' is assigned a value but never used.","'displayedProfiles' is assigned a value but never used.","'setProfiles' is assigned a value but never used.","'searchValue' is assigned a value but never used.",["74"],["75"],"no-global-assign","no-unsafe-negation"]