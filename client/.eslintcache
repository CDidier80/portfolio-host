[{"/Users/lisawand/SEIFolder/unit3/homework/portfolio-host/client/src/index.js":"1","/Users/lisawand/SEIFolder/unit3/homework/portfolio-host/client/src/httpRequest.js":"2","/Users/lisawand/SEIFolder/unit3/homework/portfolio-host/client/src/App.js":"3","/Users/lisawand/SEIFolder/unit3/homework/portfolio-host/client/src/ClientHelpers.js":"4","/Users/lisawand/SEIFolder/unit3/homework/portfolio-host/client/src/pages/LandingPage.js":"5","/Users/lisawand/SEIFolder/unit3/homework/portfolio-host/client/src/pages/MainPage.js":"6","/Users/lisawand/SEIFolder/unit3/homework/portfolio-host/client/src/pages/SignInUpPage.js":"7","/Users/lisawand/SEIFolder/unit3/homework/portfolio-host/client/src/pages/PortfolioPage.js":"8","/Users/lisawand/SEIFolder/unit3/homework/portfolio-host/client/src/pages/Mothership.js":"9","/Users/lisawand/SEIFolder/unit3/homework/portfolio-host/client/src/pages/subcomponents/ProfileCard.js":"10"},{"size":419,"mtime":1607436536643,"results":"11","hashOfConfig":"12"},{"size":3148,"mtime":1607436536641,"results":"13","hashOfConfig":"12"},{"size":1775,"mtime":1607448762646,"results":"14","hashOfConfig":"12"},{"size":1068,"mtime":1607436536641,"results":"15","hashOfConfig":"12"},{"size":4426,"mtime":1607448156896,"results":"16","hashOfConfig":"12"},{"size":5299,"mtime":1607448203879,"results":"17","hashOfConfig":"12"},{"size":3149,"mtime":1607448604991,"results":"18","hashOfConfig":"12"},{"size":5607,"mtime":1607448186631,"results":"19","hashOfConfig":"12"},{"size":19187,"mtime":1607436536643,"results":"20","hashOfConfig":"12"},{"size":2422,"mtime":1607407096254,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1q2lml3",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"24"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"/Users/lisawand/SEIFolder/unit3/homework/portfolio-host/client/src/index.js",[],["44","45"],"/Users/lisawand/SEIFolder/unit3/homework/portfolio-host/client/src/httpRequest.js",[],"/Users/lisawand/SEIFolder/unit3/homework/portfolio-host/client/src/App.js",["46","47"],"/Users/lisawand/SEIFolder/unit3/homework/portfolio-host/client/src/ClientHelpers.js",[],"/Users/lisawand/SEIFolder/unit3/homework/portfolio-host/client/src/pages/LandingPage.js",["48","49","50","51","52","53","54","55"],"/Users/lisawand/SEIFolder/unit3/homework/portfolio-host/client/src/pages/MainPage.js",["56","57","58","59","60","61","62","63","64","65"],"/Users/lisawand/SEIFolder/unit3/homework/portfolio-host/client/src/pages/SignInUpPage.js",[],"/Users/lisawand/SEIFolder/unit3/homework/portfolio-host/client/src/pages/PortfolioPage.js",["66","67","68","69","70","71","72","73","74","75","76","77","78"],"/Users/lisawand/SEIFolder/unit3/homework/portfolio-host/client/src/pages/Mothership.js",["79","80","81"],"/* eslint-disable no-lone-blocks */\nimport React, {useState} from 'react'\nimport {  get, post, del, put } from '../httpRequest'\nconst path = \"./subcomponents/ServiceTestComps\"\n\n\n\n\n\n\n\nconst httpRequest = (routeAndPayload) => {\n    // const {body} = inspectPayload(payload.body, {}), params = inspectPayload(payload.params, \"\")\n    // const userRequestedData = inspectPayload(dataRequest, false)\n    console.log(\"httpRequest() called with routeAndPayload: \", routeAndPayload )\n    try {\n        const response = () => async () => await routeAndPayload()\n        console.log(\"response object returned from back-end: \", response)\n        return response\n    } catch (error) {\n        console.log(error)\n    }\n}\n\n\nconst ServiceTest = (props) => {\n\n    /* Styles */\n    const pageFontFamily = \"Roboto, sans-serif\"\n    const primaryTextColor = \"#90caf9\"\n    const secondaryTextColor = \"white\"\n    const styles = {\n        pageWrapper: {\n            position: \"relative\",\n            top: \"0\",\n            bottom: \"0\",\n            left: \"0\",\n            right: \"0\",\n            minHeight: \"100vw\",\n            minWidth: \"100vw\",\n            padding: \"0px 15px 0px 15px\", \n            backgroundColor: \"#121212\"\n        },\n        pageTitle: {\n            marginTop: \"0px\",\n            paddingTop: \"3vh\",\n            fontSize: \"44px\", \n            textAlign: \"center\",\n            color: primaryTextColor,\n            fontFamily: pageFontFamily,\n            fontWeight: \"900\"\n        },\n        mainWrapper: {\n            width: \"85%\",\n            display: \"grid\", \n            gridTemplateColumns: \"repeat(auto-fill, minmax(300px, 1fr))\",\n            gridGap: \"1.8rem\",\n            margin: \"0 auto\",\n            padding: \"20px\",\n            borderRadius: \"10px\", \n            backgroundColor: \"#121212\", \n            color: secondaryTextColor\n        },\n        DatabaseModelWrapper: {\n            position: \"relative\",\n            minWidth: \"300px\", \n            maxWidth: \"400px\",\n            minHeight: \"400px\",\n            maxHeight: \"80vh\",\n            backgroundColor: '#424242',\n            textAlign: \"center\",\n            fontFamily: pageFontFamily,\n            borderRadius: \"10px\", \n            boxShadow: \"0 0 3px white\",\n            paddingBottom: \"30px\"\n        },\n        requestScrollPanel: {\n            width: \"85%\",\n            margin: \"0 auto\",\n            padding: \"7px\",\n            paddingBottom: \"3px\",\n            color: secondaryTextColor,\n            backgroundColor: \"#bdbdbd\",\n            fontFamily: pageFontFamily, \n            borderRadius: \"7px\",\n            overflow: \"auto\", \n            maxHeight: ''\n        },\n        controllerScrollItem: {\n            width: \"95%\",\n            padding: \"6px\",\n            margin: \"0 auto 4px auto\",\n            fontSize: \"20px\",\n            textAlign: \"left\",\n            fontFamily: pageFontFamily,\n            color: secondaryTextColor,\n            backgroundColor: \"#2e2e2e\",\n            boxShadow: \"0 0 2px black\",\n            borderRadius: \"4px\",\n            fontWeight: \"800\",\n            cursor: \"pointer\"\n        },\n        sendRequestButton: {\n            width: \"85%\",\n            bottom: \"10px\",\n            left: \"0px\", \n            right: \"0px\",\n            padding: \"6px\",\n            margin: \"12px auto 4px auto\",\n            fontSize: \"20px\",\n            textAlign: \"center\",\n            fontFamily: pageFontFamily,\n            color: primaryTextColor,\n            backgroundColor: \"#2e2e2e\",\n            boxShadow: \"0 0 0 1px black\",\n            borderRadius: \"4px\",\n            fontWeight: \"800\"\n        },\n        form:  {\n            width: \"85%\",\n            margin: \"10px auto 0 auto\",\n            padding: \"7px\",\n            paddingBottom: \"3px\",\n            color: secondaryTextColor,\n            backgroundColor: \"#bdbdbd\",\n            fontFamily: pageFontFamily, \n            borderRadius: \"7px\",\n            overflow: \"auto\", \n            position: \"relative\"\n        },\n        inputField: {\n            backgroundColor: \"white\",\n            boxShadow: \"0 0 0 1px rgba(0,0,0,.6)\",\n            width: \"95%\", \n            borderRadius: \"3px\",\n            padding: \"6px\",\n            margin: \"0 auto 4px auto\",\n            fontSize: \"14px\",\n            textAlign: \"left\",\n            fontFamily: pageFontFamily,\n            color: \"black\",\n        }\n    }\n    let s = styles  // rename to abbreviate\n\n    /* Database Table Columns */\n    const userFields = [\"name\", \"email\", \"password\"]\n    const profileFields = [ \"userId\", \"profilePicture\", \"professionalTittle\", \"organization\", \"profilePicture\", \"professionalTittle\", \"skills\", \"locale\", \"bio\" ]\n    const projectsFields = [ /**\"userId\",**/ \"title\", \"description\", \"technologies\", \"projectPicture\", \"deployLink\" ]\n\n    /* Hooks/State for User */\n    const [userController, selectUserController] = useState({controllerName: \"\", currentPayload: null})\n    const [userPayload, setUserPayload] = useState({body:{}, params: \"\"})\n\n    /* Hooks/State for Project */\n    const [projectController, selectProjectController] = useState({controllerName: \"\", currentPayload: null})\n    const [projectPayload, setProjectPayload] = useState({body:{}, params: \"\"})\n\n    /* Hooks/State for Profile */\n    const [profileController, selectProfileController] = useState({controllerName: \"\", currentPayload: null})\n    const [profilePayload, setProfilePayload] = useState({body:{}, params: \"\"})\n\n\n    const database = {\n        User: {\n            nameOfSelectedController: userController.controllerName,\n            requests :  {\n                LogInUser : {\n                    payloadDefaultsForInputFields    :  {body : [\"name\", \"email\"], params: \"\"},\n                    finalPayload                     :  () => post(`UserRouter/login${userPayload.params}`,  userPayload.body)\n                },  \n                CreateUser : { \n                    payloadDefaultsForInputFields    :  {body :  userFields, params: \"\"},\n                    finalPayload                     :  () => post(`UserRouter/create${userPayload.params}`, userPayload.body)\n                }, \n                ReadUser : { \n                    payloadDefaultsForInputFields    :   {body : [], params:\"userId\"},\n                    finalPayload                     :   () => put(`UserRouter/update${userPayload.params}`, userPayload.body)\n                },  \n                UpdateUser : { \n                    payloadDefaultsForInputFields    :   {body : [\"name\", \"email\", \"password\"], params: \"\"},\n                    finalPayload                     :   () => post(`UserRouter/login${userPayload.params}`, userPayload.body)\n                },  \n                DeleteUser : { \n                    payloadDefaultsForInputFields    :   {body : [], params: \"userId\"},\n                    finalPayload                     :   () => del(`UserRouter/delete${userPayload.params}`, userPayload.body)\n                }, \n            },\n            state : {\n                controllerHandler  :  selectUserController, \n                controller        :  userController,\n                setPayload              :  setUserPayload, \n                payload                 :  userPayload,\n            }  \n        }, \n        Profile: { \n            nameOfSelectedController: profileController.controllerName,\n            requests :  { \n                CreateProfile : {\n                    payloadDefaultsForInputFields   :   {body: profileFields, params: \"\"},\n                    finalPayload                    :   () => post(`profiles/create${profilePayload.params}`, profilePayload.body)\n                },   \n                ReadProfile : {  \n                    payloadDefaultsForInputFields   :   {body:[], params: \"profileId\"},\n                    finalPayload                    :   () => get(`profiles/read${profilePayload.params}`,    profilePayload.body)\n                },  \n                ReadAllProfiles : {  \n                    payloadDefaultsForInputFields   :   {body:[], params: \"\"},\n                    finalPayload                    :   () => get(`profiles/read${profilePayload.params}`,    profilePayload.body)\n                },   \n                UpdateProfile : {  \n                    payloadDefaultsForInputFields   :   {body:[\"name\", \"email\"], params: \"profileId\"},\n                    finalPayload                    :   () => put(`profiles/update${profilePayload.params}`,  profilePayload.body)\n                }\n            }, \n            state : { \n                controllerHandler  :  selectProfileController, \n                controller        :  profileController,\n                setPayload              :  setProfilePayload, \n                payload                 :  profilePayload,\n            }  \n        }, \n        Projects: { \n            nameOfSelectedController: projectController.controllerName,\n            requests :  { \n                CreateProject : {\n                    payloadDefaultsForInputFields   :   {body: projectsFields, params: \"userId\"},\n                    finalPayload                    :   () => post(`profiles/create${profilePayload.params}`, profilePayload.body)\n                },  \n                ReadProject : { \n                    payloadDefaultsForInputFields   :   {body: [], params: \"projectId\"},\n                    finalPayload                    :   () => get(`profiles/read${profilePayload.params}`,    profilePayload.body)\n                }, \n                GetAllProjects : { \n                    payloadDefaultsForInputFields   :   {body: [], params: \"userId\"},\n                    finalPayload                    :   () => get(`profiles/read${profilePayload.params}`,    profilePayload.body)\n                },  \n                UpdateProject : { \n                    payloadDefaultsForInputFields   :   {body: projectsFields, params: \"userId\"},\n                    finalPayload                    :   () => put(`profiles/update${profilePayload.params}`,  profilePayload.body)\n                }\n            }, \n            state : { \n                controllerHandler  :  selectProjectController, \n                controller        :  projectController,\n                setPayload              :  setProjectPayload, \n                payload                 :  projectPayload,\n            } \n        },\n    }\n\n    const models = Object.keys(database)   // [\"User\", \"Profile\", \"Projects\"]\n    // const contr = [\"userController :\", userController, \"projectController: \", projectController, \"profileController: \", profileController]\n    // contr.forEach((el) => console.log(el))\n\n    return (\n        <div style={s.pageWrapper}> \n            <h1 style={s.pageTitle}>Full Stack Route Testing</h1>\n            <main style={s.mainWrapper}>\n\n            {/* CARD/WRAPPER FOR EACH DATABASE TABLE */}\n                {models.map((model) => {\n\n                {/* DECLARE VARIABLES */}\n\n                    const table = database[model]                                                     // table object captured\n                    const {nameOfSelectedController, requests, state} = table                         // ---> destructure table into it's 3 objects\n                    const {controllerHandler, controller , setPayload, payload} = state    // ---> destructure state\n                    const requestsKeys = Object.keys(requests)                                        // ---> array of all Controller names as strings, used for iterating with map\n                    \n                    \n\n                    const controllerSelected = nameOfSelectedController ? true : false \n                    let target, body, params, emptyPayloadOfSelectedController, paramsIsUsed, finalAPIcall\n                    if (controllerSelected) { \n                    target = requests[nameOfSelectedController]                                   // ---> declare selected Controller as an accessible variable   \n                    body = target.payloadDefaultsForInputFields.body                              // ---> declare body to access default fields\n                    params = target.payloadDefaultsForInputFields.params                          // ---> declare body to access default fields\n                    paramsIsUsed = params ? true : false                                          // ---> boolean that conditionally renders an input field for params\n                    finalAPIcall = target.finalPayload                        // ---> crud Function of selected controller without an added payload.\n                    }               \n                    let logGroup = [target, body, params, emptyPayloadOfSelectedController, paramsIsUsed, controllerSelected]\n                    // logGroup.forEach((elem, index) => {\n                    //     console.log(index, elem)\n                    // })\n\n                    return (\n                        <div key={model} style={s.DatabaseModelWrapper}>\n                            <h1>{model}</h1>\n\n\n                        {/* SCROLL PANEL FOR EACH TABLE'S CONTROLLER FUNCTIONS */}\n                            <div style={s.requestScrollPanel}>\n                            \n                            {/*SCROLL ITEMS (named for Controller Functions)*/}\n                            {/* const [userController, selectUserController] = useState({controllerName: \"\", currentPayload: null}) */}\n                                {requestsKeys.map((controllerNameString) => {\n                                    const finalPayload          = (requests[controllerNameString]).finalPayload           // e.g. requests[\"CreateProfile\"].finalPayload             =>     post(`profiles/create ... , userPayload.body) === finalPayload         \n                                    return (\n                                        <div key={controllerNameString} style={styles.controllerScrollItem} onClick={() => controllerHandler({controllerName: controllerNameString, finalPayload         : finalPayload         })}>{controllerNameString}</div> \n                                    )  \n                                })}\n                            </div>\n                            {/* END SCROLL ITEMS */}\n                        {/* END SCROLL PANEL */}\n\n\n                        {/* FORM PANEL BEGINS */} \n                        { //A Form With Input Fields Will Render If User Selects A Controller Function \n                        // No Form Fields Will Appear Until A Controller Is Clicked\n                        }\n                            {controllerSelected  &&\n                            <div>\n                            <form style={s.form}>\n                                {/* INPUT FIELDS */}  \n                                    {/* -- input textfields corresponding to fields in payload body for selected controller */}  \n                                    {/* body and params (used to populate the form) are located in payloadDefaultsForInputFields.body and payloadDefaultsForInputFields.params */}\n                                    {/* body and params will be destructured from through   database.tableName.requests.controllerName.payloadDefaultsForInputFields */}\n                                    {/* controllerNameStrings are keys to the value {payloadDefaultsForInputFields:{}, finalPayload         :{}}*/}\n                                    {body.map((tableField, index) => {\n                                        // console.log(tableField)\n                                        \n                                        const armTheMotherfuckingBomb = (e) => {\n                                            \n                                            let update = e.target.value\n                                            let payloadBody = payload.body\n                                            // console.log(\"payloadBody :\", payloadBody)\n                                            let params = payload.params\n                                            let mergingObject = {}\n                                            mergingObject[tableField] = update\n                                            // console.log(\"mergingObject: \", mergingObject)\n                                            let mergedBody = {...payloadBody, ...mergingObject}\n                                            // console.log(\"mergedBody: \", mergedBody)\n                                            setPayload({body: mergedBody, params: params})\n                                        }\n                                        return <input key={`${index}tablefield`} type={\"search\"} defaultValue={tableField} onChange={(e) => armTheMotherfuckingBomb(e)} style={s.inputField}></input>\n                                    })}\n                                    {/* -- one input field for params string renders if selected controller uses it */} \n                                    { paramsIsUsed ? \n                                        (() => {\n                                            const writeTheWord = (e) => {\n                                                let update = e.target.value\n                                                let params = payload.params\n                                                console.log(\"params before change: \", params)\n                                                console.log(\"update to params: \", update)\n                                                let payloadBody = payload.body\n                                                setPayload({body: payloadBody, params: update})\n                                            }\n                                            return (<input style={s.inputField} defaultValue={params} onChange={(e) => writeTheWord(e)}></input>)\n                                        })()\n                                        : null } \n                                </form>\n                                <button style={s.sendRequestButton} onClick={() => httpRequest(finalAPIcall)}>Send Request</button>\n                                {/* <button style={s.sendRequestButton} onClick={()=>httpRequest(controller , payload)}>Send Request</button> */}\n                            </div>\n                            }\n                        </div>\n                    )\n                })}\n            </main>\n        </div>\n    )\n}\n\nexport default ServiceTest\n\n{/*</form>onChange={(e) => value={e.target.value}*/}\n//  Tables need scroll items\n\n// Each scroll items need to be able to be clicked\n// On click, they need to set the focus of the form to the selected function\n// If no function is focused on, there are no fields to add body/params\n// When the focus is set in state, the page will rerender\n// There needs to be conditionally rendered text fields corresponding to the body and params of the selected \n// fields must check if a function is focused on\n// They will activate when function focus is set by scroll item button click\n\n\n\n// next up => create text fields for 1) body, 2) params below the scroll panel\n\n\n\n\n// use of data selection tbd\n\n    // const [userDataRequest, setUserDataReq] = useState([])\n    // const [projectDataRequest,setProjectDataReq] = useState([])\n    // const [profileDataRequest, setProfileDataReq] = useState([])","/Users/lisawand/SEIFolder/unit3/homework/portfolio-host/client/src/pages/subcomponents/ProfileCard.js",[],{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","severity":1,"message":"87","line":1,"column":17,"nodeType":"88","messageId":"89","endLine":1,"endColumn":26},{"ruleId":"86","severity":1,"message":"90","line":21,"column":11,"nodeType":"88","messageId":"89","endLine":21,"endColumn":20},{"ruleId":"86","severity":1,"message":"87","line":2,"column":26,"nodeType":"88","messageId":"89","endLine":2,"endColumn":35},{"ruleId":"86","severity":1,"message":"91","line":63,"column":23,"nodeType":"88","messageId":"89","endLine":63,"endColumn":26},{"ruleId":"86","severity":1,"message":"92","line":63,"column":28,"nodeType":"88","messageId":"89","endLine":63,"endColumn":31},{"ruleId":"86","severity":1,"message":"93","line":63,"column":33,"nodeType":"88","messageId":"89","endLine":63,"endColumn":37},{"ruleId":"86","severity":1,"message":"94","line":66,"column":10,"nodeType":"88","messageId":"89","endLine":66,"endColumn":27},{"ruleId":"86","severity":1,"message":"95","line":66,"column":29,"nodeType":"88","messageId":"89","endLine":66,"endColumn":40},{"ruleId":"86","severity":1,"message":"96","line":67,"column":10,"nodeType":"88","messageId":"89","endLine":67,"endColumn":21},{"ruleId":"86","severity":1,"message":"90","line":68,"column":9,"nodeType":"88","messageId":"89","endLine":68,"endColumn":18},{"ruleId":"86","severity":1,"message":"87","line":1,"column":27,"nodeType":"88","messageId":"89","endLine":1,"endColumn":36},{"ruleId":"86","severity":1,"message":"97","line":77,"column":11,"nodeType":"88","messageId":"89","endLine":77,"endColumn":22},{"ruleId":"86","severity":1,"message":"91","line":77,"column":24,"nodeType":"88","messageId":"89","endLine":77,"endColumn":27},{"ruleId":"86","severity":1,"message":"92","line":77,"column":29,"nodeType":"88","messageId":"89","endLine":77,"endColumn":32},{"ruleId":"86","severity":1,"message":"93","line":77,"column":34,"nodeType":"88","messageId":"89","endLine":77,"endColumn":38},{"ruleId":"86","severity":1,"message":"94","line":80,"column":10,"nodeType":"88","messageId":"89","endLine":80,"endColumn":27},{"ruleId":"86","severity":1,"message":"95","line":80,"column":29,"nodeType":"88","messageId":"89","endLine":80,"endColumn":40},{"ruleId":"86","severity":1,"message":"96","line":81,"column":10,"nodeType":"88","messageId":"89","endLine":81,"endColumn":21},{"ruleId":"86","severity":1,"message":"98","line":81,"column":23,"nodeType":"88","messageId":"89","endLine":81,"endColumn":37},{"ruleId":"86","severity":1,"message":"99","line":83,"column":12,"nodeType":"88","messageId":"89","endLine":83,"endColumn":19},{"ruleId":"86","severity":1,"message":"87","line":1,"column":27,"nodeType":"88","messageId":"89","endLine":1,"endColumn":36},{"ruleId":"86","severity":1,"message":"100","line":11,"column":8,"nodeType":"88","messageId":"89","endLine":11,"endColumn":12},{"ruleId":"86","severity":1,"message":"101","line":12,"column":8,"nodeType":"88","messageId":"89","endLine":12,"endColumn":13},{"ruleId":"86","severity":1,"message":"102","line":13,"column":8,"nodeType":"88","messageId":"89","endLine":13,"endColumn":19},{"ruleId":"86","severity":1,"message":"97","line":100,"column":11,"nodeType":"88","messageId":"89","endLine":100,"endColumn":22},{"ruleId":"86","severity":1,"message":"91","line":100,"column":24,"nodeType":"88","messageId":"89","endLine":100,"endColumn":27},{"ruleId":"86","severity":1,"message":"92","line":100,"column":29,"nodeType":"88","messageId":"89","endLine":100,"endColumn":32},{"ruleId":"86","severity":1,"message":"93","line":100,"column":34,"nodeType":"88","messageId":"89","endLine":100,"endColumn":38},{"ruleId":"86","severity":1,"message":"94","line":103,"column":10,"nodeType":"88","messageId":"89","endLine":103,"endColumn":27},{"ruleId":"86","severity":1,"message":"95","line":103,"column":29,"nodeType":"88","messageId":"89","endLine":103,"endColumn":40},{"ruleId":"86","severity":1,"message":"96","line":104,"column":10,"nodeType":"88","messageId":"89","endLine":104,"endColumn":21},{"ruleId":"86","severity":1,"message":"98","line":104,"column":23,"nodeType":"88","messageId":"89","endLine":104,"endColumn":37},{"ruleId":"103","severity":1,"message":"104","line":145,"column":11,"nodeType":"105","endLine":146,"endColumn":196},{"ruleId":"86","severity":1,"message":"106","line":4,"column":7,"nodeType":"88","messageId":"89","endLine":4,"endColumn":11},{"ruleId":"86","severity":1,"message":"107","line":268,"column":47,"nodeType":"88","messageId":"89","endLine":268,"endColumn":57},{"ruleId":"86","severity":1,"message":"108","line":282,"column":25,"nodeType":"88","messageId":"89","endLine":282,"endColumn":33},"no-native-reassign",["109"],"no-negated-in-lhs",["110"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useEffect' is assigned a value but never used.","'get' is assigned a value but never used.","'put' is assigned a value but never used.","'post' is assigned a value but never used.","'displayedProfiles' is assigned a value but never used.","'setProfiles' is assigned a value but never used.","'searchValue' is assigned a value but never used.","'httpRequest' is assigned a value but never used.","'setSearchField' is assigned a value but never used.","'FormRow' is defined but never used.","'Grid' is defined but never used.","'Paper' is defined but never used.","'ProfileCard' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'path' is assigned a value but never used.","'controller' is assigned a value but never used.","'logGroup' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]