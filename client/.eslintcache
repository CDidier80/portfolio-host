[{"/Users/collindidier/Desktop/ga/portfolio-host/client/src/index.js":"1","/Users/collindidier/Desktop/ga/portfolio-host/client/src/App.js":"2","/Users/collindidier/Desktop/ga/portfolio-host/client/src/pages/SettingsPage.js":"3","/Users/collindidier/Desktop/ga/portfolio-host/client/src/pages/Mothership.js":"4","/Users/collindidier/Desktop/ga/portfolio-host/client/src/pages/MainPage.js":"5","/Users/collindidier/Desktop/ga/portfolio-host/client/src/pages/SignUpPage.js":"6","/Users/collindidier/Desktop/ga/portfolio-host/client/src/pages/SignInPage.js":"7","/Users/collindidier/Desktop/ga/portfolio-host/client/src/pages/PortfolioPage.js":"8","/Users/collindidier/Desktop/ga/portfolio-host/client/src/pages/LandingPage.js":"9","/Users/collindidier/Desktop/ga/portfolio-host/client/src/pages/subcomponents/imageloadtestLuis.js":"10","/Users/collindidier/Desktop/ga/portfolio-host/client/src/pages/subcomponents/ProfileCard.js":"11","/Users/collindidier/Desktop/ga/portfolio-host/client/src/pages/SignInSignUpPage.js":"12"},{"size":379,"mtime":1607447660791,"results":"13","hashOfConfig":"14"},{"size":2381,"mtime":1607458144915,"results":"15","hashOfConfig":"14"},{"size":185,"mtime":1607446994643,"results":"16","hashOfConfig":"14"},{"size":19214,"mtime":1607453331556,"results":"17","hashOfConfig":"14"},{"size":5299,"mtime":1607454358411,"results":"18","hashOfConfig":"14"},{"size":5803,"mtime":1607457190293,"results":"19","hashOfConfig":"14"},{"size":3552,"mtime":1607457190292,"results":"20","hashOfConfig":"14"},{"size":5880,"mtime":1607454541256,"results":"21","hashOfConfig":"14"},{"size":4441,"mtime":1607457190292,"results":"22","hashOfConfig":"14"},{"size":2006,"mtime":1607457190294,"results":"23","hashOfConfig":"14"},{"size":2422,"mtime":1607413286887,"results":"24","hashOfConfig":"14"},{"size":6296,"mtime":1607461977049,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"k5nr71",{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"33"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"33"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"33"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"33"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"33"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"33"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/collindidier/Desktop/ga/portfolio-host/client/src/index.js",[],"/Users/collindidier/Desktop/ga/portfolio-host/client/src/App.js",["58"],"/Users/collindidier/Desktop/ga/portfolio-host/client/src/pages/SettingsPage.js",["59","60"],"import React, { useState, useEffect } from 'react'\n\n\n\n\nconst SettingsPage = (props) => {\n    \n    return (\n        <div>\n            \n        </div>\n    )\n}\n\nexport default SettingsPage",["61","62"],"/Users/collindidier/Desktop/ga/portfolio-host/client/src/pages/Mothership.js",["63","64"],"/* eslint-disable no-lone-blocks */\nimport React, {useState} from 'react'\nimport axios from 'axios'\nconst ApiClient = axios.create({ baseURL: 'http://localhost:3001/api/' })\nconst {get, put, post} = ApiClient, del = ApiClient.delete\n\n\nconst httpRequest = async (routeAndPayload) => {\n    // const {body} = inspectPayload(payload.body, {}), params = inspectPayload(payload.params, \"\")\n    // const userRequestedData = inspectPayload(dataRequest, false)\n    console.log(\"httpRequest() called with routeAndPayload: \", routeAndPayload )\n    try {\n        const response = await routeAndPayload()\n        console.log(\"response object returned from back-end: \", response)\n        return response\n    } catch (error) {\n        console.log(\"Error received in Mothership.js, httpRequest() response try-catch: \", error)\n    }\n}\n\n\nconst ServiceTest = (props) => {\n\n    /* Styles */\n    const pageFontFamily = \"Roboto, sans-serif\"\n    const primaryTextColor = \"#90caf9\"\n    const secondaryTextColor = \"white\"\n    const styles = {\n        pageWrapper: {\n            position: \"relative\",\n            top: \"0\",\n            bottom: \"0\",\n            left: \"0\",\n            right: \"0\",\n            minHeight: \"100vw\",\n            minWidth: \"100vw\",\n            padding: \"0px 15px 0px 15px\", \n            backgroundColor: \"#121212\"\n        },\n        pageTitle: {\n            marginTop: \"0px\",\n            paddingTop: \"3vh\",\n            fontSize: \"44px\", \n            textAlign: \"center\",\n            color: primaryTextColor,\n            fontFamily: pageFontFamily,\n            fontWeight: \"900\"\n        },\n        mainWrapper: {\n            width: \"85%\",\n            display: \"grid\", \n            gridTemplateColumns: \"repeat(auto-fill, minmax(300px, 1fr))\",\n            gridGap: \"1.8rem\",\n            margin: \"0 auto\",\n            padding: \"20px\",\n            borderRadius: \"10px\", \n            backgroundColor: \"#121212\", \n            color: secondaryTextColor\n        },\n        DatabaseModelWrapper: {\n            position: \"relative\",\n            minWidth: \"300px\", \n            maxWidth: \"400px\",\n            minHeight: \"400px\",\n            maxHeight: \"80vh\",\n            backgroundColor: '#424242',\n            textAlign: \"center\",\n            fontFamily: pageFontFamily,\n            borderRadius: \"10px\", \n            boxShadow: \"0 0 3px white\",\n            paddingBottom: \"30px\"\n        },\n        requestScrollPanel: {\n            width: \"85%\",\n            margin: \"0 auto\",\n            padding: \"7px\",\n            paddingBottom: \"3px\",\n            color: secondaryTextColor,\n            backgroundColor: \"#bdbdbd\",\n            fontFamily: pageFontFamily, \n            borderRadius: \"7px\",\n            overflow: \"auto\", \n            maxHeight: ''\n        },\n        controllerScrollItem: {\n            width: \"95%\",\n            padding: \"6px\",\n            margin: \"0 auto 4px auto\",\n            fontSize: \"20px\",\n            textAlign: \"left\",\n            fontFamily: pageFontFamily,\n            color: secondaryTextColor,\n            backgroundColor: \"#2e2e2e\",\n            boxShadow: \"0 0 2px black\",\n            borderRadius: \"4px\",\n            fontWeight: \"800\",\n            cursor: \"pointer\"\n        },\n        sendRequestButton: {\n            width: \"85%\",\n            bottom: \"10px\",\n            left: \"0px\", \n            right: \"0px\",\n            padding: \"6px\",\n            margin: \"12px auto 4px auto\",\n            fontSize: \"20px\",\n            textAlign: \"center\",\n            fontFamily: pageFontFamily,\n            color: primaryTextColor,\n            backgroundColor: \"#2e2e2e\",\n            boxShadow: \"0 0 0 1px black\",\n            borderRadius: \"4px\",\n            fontWeight: \"800\"\n        },\n        form:  {\n            width: \"85%\",\n            margin: \"10px auto 0 auto\",\n            padding: \"7px\",\n            paddingBottom: \"3px\",\n            color: secondaryTextColor,\n            backgroundColor: \"#bdbdbd\",\n            fontFamily: pageFontFamily, \n            borderRadius: \"7px\",\n            overflow: \"auto\", \n            position: \"relative\"\n        },\n        inputField: {\n            backgroundColor: \"white\",\n            boxShadow: \"0 0 0 1px rgba(0,0,0,.6)\",\n            width: \"95%\", \n            borderRadius: \"3px\",\n            padding: \"6px\",\n            margin: \"0 auto 4px auto\",\n            fontSize: \"14px\",\n            textAlign: \"left\",\n            fontFamily: pageFontFamily,\n            color: \"black\",\n        }\n    }\n    let s = styles  // rename to abbreviate\n\n    /* Database Table Columns */\n    const userFields = [\"name\", \"email\", \"password\"]\n    const profileFields = [ \"userId\", \"profilePicture\", \"professionalTittle\", \"organization\", \"profilePicture\", \"professionalTittle\", \"skills\", \"locale\", \"bio\" ]\n    const projectsFields = [ /**\"userId\",**/ \"title\", \"description\", \"technologies\", \"projectPicture\", \"deployLink\" ]\n\n    /* Hooks/State for User */\n    const [userController, selectUserController] = useState({controllerName: \"\", currentPayload: null})\n    const [userPayload, setUserPayload] = useState({body:{}, params: \"\"})\n\n    /* Hooks/State for Project */\n    const [projectController, selectProjectController] = useState({controllerName: \"\", currentPayload: null})\n    const [projectPayload, setProjectPayload] = useState({body:{}, params: \"\"})\n\n    /* Hooks/State for Profile */\n    const [profileController, selectProfileController] = useState({controllerName: \"\", currentPayload: null})\n    const [profilePayload, setProfilePayload] = useState({body:{}, params: \"\"})\n\n    const database = {\n        User: {\n            nameOfSelectedController: userController.controllerName,\n            requests :  {\n                LogInUser : {\n                    payloadDefaultsForInputFields    :  {body : [\"name\", \"email\"], params: \"\"},\n                    finalPayload                     :  () => post(`users/login${userPayload.params}`,  userPayload.body)\n                },  \n                CreateUser : { \n                    payloadDefaultsForInputFields    :  {body :  userFields, params: \"\"},\n                    finalPayload                     :  () => post(`users/create${userPayload.params}`, userPayload.body)\n                }, \n                ReadUser : { \n                    payloadDefaultsForInputFields    :   {body : [], params:\"userId\"},\n                    finalPayload                     :   () => put(`users/update${userPayload.params}`, userPayload.body)\n                },  \n                UpdateUser : { \n                    payloadDefaultsForInputFields    :   {body : [\"name\", \"email\", \"password\"], params: \"\"},\n                    finalPayload                     :   () => post(`users/login${userPayload.params}`, userPayload.body)\n                },  \n                DeleteUser : { \n                    payloadDefaultsForInputFields    :   {body : [], params: \"userId\"},\n                    finalPayload                     :   () => del(`users/delete${userPayload.params}`, userPayload.body)\n                }, \n            },\n            state : {\n                controllerHandler  :  selectUserController, \n                controller         :  userController,\n                setPayload         :  setUserPayload, \n                payload            :  userPayload,\n            }  \n        }, \n        Profile: { \n            nameOfSelectedController: profileController.controllerName,\n            requests :  { \n                CreateProfile : {\n                    payloadDefaultsForInputFields   :   {body: profileFields, params: \"user\"},\n                    finalPayload                    :   () => post(`profile/create${profilePayload.params}`, profilePayload.body)\n                },   \n                ReadProfile : {  \n                    payloadDefaultsForInputFields   :   {body:[], params: \"profileId\"},\n                    finalPayload                    :   () => get(`profile/read${profilePayload.params}`,    profilePayload.body)\n                },  \n                ReadAllProfiles : {  \n                    payloadDefaultsForInputFields   :   {body:[], params: \"\"},\n                    finalPayload                    :   () => get(`profile/${profilePayload.params}`,    profilePayload.body)\n                },   \n                UpdateProfile : {  \n                    payloadDefaultsForInputFields   :   {body:[\"name\", \"email\"], params: \"profileId\"},\n                    finalPayload                    :   () => put(`profile/update/${profilePayload.params}`,  profilePayload.body)\n                }\n            }, \n            state : { \n                controllerHandler  :  selectProfileController, \n                controller         :  profileController,\n                setPayload         :  setProfilePayload, \n                payload            :  profilePayload,\n            }  \n        }, \n        Projects: { \n            nameOfSelectedController: projectController.controllerName,\n            requests :  { \n                CreateProject : {\n                    payloadDefaultsForInputFields   :   {body: projectsFields, params: \"userId\"},\n                    finalPayload                    :   () => post(`projects/create${profilePayload.params}`, profilePayload.body)\n                },  \n                ReadProject : { \n                    payloadDefaultsForInputFields   :   {body: [], params: \"projectId\"},\n                    finalPayload                    :   () => get(`projects/read${profilePayload.params}`,    profilePayload.body)\n                }, \n                GetAllProjects : { \n                    payloadDefaultsForInputFields   :   {body: [], params: \"userId\"},\n                    finalPayload                    :   () => get(`projects/read${profilePayload.params}`,    profilePayload.body)\n                },  \n                UpdateProject : { \n                    payloadDefaultsForInputFields   :   {body: projectsFields, params: \"userId\"},\n                    finalPayload                    :   () => put(`projects/update${profilePayload.params}`,  profilePayload.body)\n                }\n            }, \n            state : { \n                controllerHandler  :  selectProjectController, \n                controller         :  projectController,\n                setPayload         :  setProjectPayload, \n                payload            :  projectPayload,\n            } \n        },\n    }\n\n    const models = Object.keys(database)   // [\"User\", \"Profile\", \"Projects\"]\n    // const contr = [\"userController :\", userController, \"projectController: \", projectController, \"profileController: \", profileController]\n    // contr.forEach((el) => console.log(el))\n\n    return (\n        <div style={s.pageWrapper}> \n            <h1 style={s.pageTitle}>Full Stack Route Testing</h1>\n            <main style={s.mainWrapper}>\n\n            {/* CARD/WRAPPER FOR EACH DATABASE TABLE */}\n                {models.map((model) => {\n\n                {/* DECLARE VARIABLES */}\n\n                    const table = database[model]                                                 // table object captured\n                    const {nameOfSelectedController, requests, state} = table                     // ---> destructure table into it's 3 objects\n                    const {controllerHandler, controller , setPayload, payload} = state           // ---> destructure state\n                    const requestsKeys = Object.keys(requests)                                    // ---> array of all Controller names as strings, used for iterating with map\n                    const controllerSelected = nameOfSelectedController ? true : false \n                    let target, body, params, emptyPayloadOfSelectedController, paramsIsUsed, finalAPIcall\n                    if (controllerSelected) { \n                    target = requests[nameOfSelectedController]                                   // ---> declare selected Controller as an accessible variable   \n                    body = target.payloadDefaultsForInputFields.body                              // ---> declare body to access default fields\n                    params = target.payloadDefaultsForInputFields.params                          // ---> declare body to access default fields\n                    paramsIsUsed = params ? true : false                                          // ---> boolean that conditionally renders an input field for params\n                    finalAPIcall = target.finalPayload                                            // ---> crud Function of selected controller without an added payload.\n                    }               \n                    let logGroup = [target, body, params, emptyPayloadOfSelectedController, paramsIsUsed, controllerSelected]\n                    // logGroup.forEach((elem, index) => {\n                    //     console.log(index, elem)\n                    // })\n\n                    return (\n                        <div key={model} style={s.DatabaseModelWrapper}>\n                            <h1>{model}</h1>\n\n\n                        {/* SCROLL PANEL FOR EACH TABLE'S CONTROLLER FUNCTIONS */}\n                            <div style={s.requestScrollPanel}>\n                            \n                            {/*SCROLL ITEMS (named for Controller Functions)*/}\n                            {/* const [userController, selectUserController] = useState({controllerName: \"\", currentPayload: null}) */}\n                                {requestsKeys.map((controllerNameString) => {\n                                    const finalPayload          = (requests[controllerNameString]).finalPayload           // e.g. requests[\"CreateProfile\"].finalPayload             =>     post(`profiles/create ... , userPayload.body) === finalPayload         \n                                    return (\n                                        <div key={controllerNameString} style={styles.controllerScrollItem} onClick={() => controllerHandler({controllerName: controllerNameString, finalPayload         : finalPayload         })}>{controllerNameString}</div> \n                                    )  \n                                })}\n                            </div>\n                            {/* END SCROLL ITEMS */}\n                        {/* END SCROLL PANEL */}\n\n\n                        {/* FORM PANEL BEGINS */} \n                        { //A Form With Input Fields Will Render If User Selects A Controller Function \n                        // No Form Fields Will Appear Until A Controller Is Clicked\n                        }\n                            {controllerSelected  &&\n                            <div>\n                            <form style={s.form}>\n                                {/* INPUT FIELDS */}  \n                                    {/* -- input textfields corresponding to fields in payload body for selected controller */}  \n                                    {/* body and params (used to populate the form) are located in payloadDefaultsForInputFields.body and payloadDefaultsForInputFields.params */}\n                                    {/* body and params will be destructured from through   database.tableName.requests.controllerName.payloadDefaultsForInputFields */}\n                                    {/* controllerNameStrings are keys to the value {payloadDefaultsForInputFields:{}, finalPayload         :{}}*/}\n                                    {body.map((tableField, index) => {\n                                        // console.log(tableField)\n                                        \n                                        const armTheMotherfuckingBomb = (e) => {\n                                            \n                                            let update = e.target.value\n                                            let payloadBody = payload.body\n                                            // console.log(\"payloadBody :\", payloadBody)\n                                            let params = payload.params\n                                            let mergingObject = {}\n                                            mergingObject[tableField] = update\n                                            // console.log(\"mergingObject: \", mergingObject)\n                                            let mergedBody = {...payloadBody, ...mergingObject}\n                                            // console.log(\"mergedBody: \", mergedBody)\n                                            setPayload({body: mergedBody, params: params})\n                                        }\n                                        return <input key={`${index}tablefield`} type={\"search\"} defaultValue={tableField} onChange={(e) => armTheMotherfuckingBomb(e)} style={s.inputField}></input>\n                                    })}\n                                    {/* -- one input field for params string renders if selected controller uses it */} \n                                    { paramsIsUsed ? \n                                        (() => {\n                                            const writeTheWord = (e) => {\n                                                let update = e.target.value\n                                                let params = payload.params\n                                                console.log(\"params before change: \", params)\n                                                console.log(\"update to params: \", update)\n                                                let payloadBody = payload.body\n                                                setPayload({body: payloadBody, params: update})\n                                            }\n                                            return (<input style={s.inputField} defaultValue={params} onChange={(e) => writeTheWord(e)}></input>)\n                                        })()\n                                        : null } \n                                </form>\n                                <button style={s.sendRequestButton} onClick={() => httpRequest(finalAPIcall)}>Send Request</button>\n                                {/* <button style={s.sendRequestButton} onClick={()=>httpRequest(controller , payload)}>Send Request</button> */}\n                            </div>\n                            }\n                        </div>\n                    )\n                })}\n            </main>\n        </div>\n    )\n}\n\nexport default ServiceTest\n\n{/*</form>onChange={(e) => value={e.target.value}*/}\n//  Tables need scroll items\n\n// Each scroll items need to be able to be clicked\n// On click, they need to set the focus of the form to the selected function\n// If no function is focused on, there are no fields to add body/params\n// When the focus is set in state, the page will rerender\n// There needs to be conditionally rendered text fields corresponding to the body and params of the selected \n// fields must check if a function is focused on\n// They will activate when function focus is set by scroll item button click\n\n\n\n// next up => create text fields for 1) body, 2) params below the scroll panel\n\n\n\n\n// use of data selection tbd\n\n    // const [userDataRequest, setUserDataReq] = useState([])\n    // const [projectDataRequest,setProjectDataReq] = useState([])\n    // const [profileDataRequest, setProfileDataReq] = useState([])","/Users/collindidier/Desktop/ga/portfolio-host/client/src/pages/MainPage.js",["65","66","67","68","69","70","71","72","73","74"],"import React, { useState, useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\n// import IconButton from '@material-ui/core/IconButton';\n// import MenuIcon from '@material-ui/icons/Menu';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport ProfileCard from '../pages/subcomponents/ProfileCard'\nimport { Link } from 'react-router-dom'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  textGreeting: {\n    display: \"block\",\n    marginLeft: \"5vw\",\n    alignText: \"left\",\n    welcome: {\n      fontSize: \"35px\"\n    },\n    subHeader: {\n      fontSize: \"20px\"\n    },\n  },\n  httpTest: {\n    margin: \"0 auto\",\n    marginTop: \"70px\",\n    width: \"300px\",\n    height: \"50px\",\n    display: \"flex\",\n    justifyContent: \"spaceBetween\",\n    textfield: {\n      width: \"60%\",\n      height: \"80px\",\n      backgroundColor: \"white\",\n      border: \"1px solid black\"\n    },\n    loginButton: {\n      display: \"block\",\n      margin: \"0 auto\",\n      width: \"80px\",\n      height: \"40px\",\n      fontSize: \"18px\"\n    },\n    submitTestButton: {\n      height: \"80px\",\n      width: \"80px\",\n      color: \"black\",\n      backgroundColor: \"white\"\n    }\n  },\n  profileCardWrapper: {\n    display: \"grid\",\n    gridTemplateColumns: \"50% 50%\",\n    paddingTop: \"13px\",\n    backgroundColor: \"white\",\n    borderRadius: \"10px\",\n    boxShadow: \"0 0 4px white\"\n  }\n}));\n\n\nconst MainPage = (props) => {\n\n  const { httpRequest, get, put, post } = props\n  const classes = useStyles();\n  const [anchorEl, setAnchorEl] = useState(null);\n  const [displayedProfiles, setProfiles] = useState([])\n  const [searchValue, setSearchField] = useState(\"\")\n\n  function FormRow() {\n    return (\n      <React.Fragment>\n        <Grid item xs={6}>\n          <Paper className={classes.paper}></Paper>\n        </Grid>\n        <Grid item xs={4}>\n          <Paper className={classes.paper}></Paper>\n        </Grid>\n      </React.Fragment>\n    );\n  }\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n\n\n  };\n  return (\n    <div>\n      {/* nav bar */}\n      <div className={classes.root}>\n        <AppBar position=\"static\">\n          <Toolbar>\n            <Button aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick}> Menu </Button>\n            <Menu id=\"simple-menu\" anchorEl={anchorEl} keepMounted open={Boolean(anchorEl)} onClose={handleClose} >\n              <Link to=\"/signup\">\n                <MenuItem onClick={handleClose}> Login </MenuItem>\n              </Link>\n              <Link to=\"/portfolio\">\n                <MenuItem onClick={handleClose}>My account</MenuItem>\n              </Link>\n              <Link to=\"/main\">\n                <MenuItem onClick={handleClose}>Home</MenuItem>\n              </Link>\n            </Menu>\n            <Typography variant=\"h6\" className={classes.title}>DevPortal</Typography>\n            {/** LINK TO SignInSignUp page. <Link /> can accept props to send if need be**/}\n            <Link to=\"/signup\">\n              <Button color=\"#fce4ec\">Login</Button>\n            </Link>\n          </Toolbar>\n        </AppBar>\n      </div>\n\n      {/* start of profile box */}\n      < div className={classes.profileCardWrapper} >\n        <ProfileCard />\n        <ProfileCard />\n      </div >\n    </div>\n  )\n}\n\nexport default MainPage\n\n\n\n\n\n// const styles = {\n//   customCardWrapper: {\n//     maxHeight: \"280px\",\n//     postition: \"relative\",\n//     overflow: \"auto\",\n//     display: \"flex\",\n//     flexDirection: \"column\",\n//     backgroundColor: \"white\",\n//     borderRadius: \"10px\",\n//     boxShadow: \"0 0 4px white\"\n//   },\n//   topHalf: {\n//     width: \"100%\",\n//     height: \"140px\",\n//     padding: \"4px\",\n//     postion: \"relative\",\n//     fontFamily: \"Roboto\"\n//   },\n//   imageWrapper: {\n//     width: \"50%\",\n//   },\n//   image: {\n//     borderRadius: \"5px\",\n//     boxShadow: \"0 0 2px black\"\n//   },\n//   textBox: {\n//     width: \"50%\",\n//     padding: \"5px\",\n//     fontFamily: \"Roboto\"\n//   },\n//   bottomHalf: {\n//     height: \"140px\",\n//     padding: \"5px\",\n//     fontFamily: \"Roboto\"\n//   },\n// }\n\n  // < div style = { styles.profileCardWrapper } >\n  //         <div style={styles.topHalf}>\n  //           <div style={styles.imageWrapper}>\n  //             <img style={styles.image} src={\"https://media-exp1.licdn.com/dms/image/C4E03AQGUsbLOaj6-8A/profile-displayphoto-shrink_800_800/0/1594259451378?e=1613001600&v=beta&t=QeZtzDqZd4_ONzoRmBvE3v-O47fKZbqzyXrOxPTzhwk\"} />\n  //           </div>\n  //           <div style={styles.textBox}>\n  //             <h3>Collin Didier</h3>\n  //             <h4>Software Engineer</h4>\n  //           </div>\n  //         </div>\n  //         <div style={styles.bottomHalf}>\n  //           <h3>slogan</h3>\n  //           <h4>technologies</h4>\n  //           <p>link</p>\n  //         </div>\n  //       </div >","/Users/collindidier/Desktop/ga/portfolio-host/client/src/pages/SignUpPage.js",["75","76","77"],"// import SignInSignUpForm from \"./subcomponents/SignInSignUpForm\"\nimport React from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\n// import Link from '@material-ui/core/Link';\n// import Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport { Link } from 'react-router-dom'\n\n// function Copyright() {\n//   return (\n//     <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n//       {'Copyright © '}\n//       <Link color=\"inherit\" href=\"https://material-ui.com/\">\n//         Your Website\n//       </Link>{' '}\n//       {new Date().getFullYear()}\n//       {'.'}\n//     </Typography>\n//   );\n// }\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  buttonWrapper: {\n    display: \"grid\",\n    gridTemplateColumns: \"1fr 1fr\",\n  }\n}));\n\nconst formSubmit = (e) => {\n  e.target.push('/main');\n}\n\nconst SignUpPage = (props) => {\n  const classes = useStyles();\n\n  const signUpSubmit = async (event) => {\n    console.log(event)\n    // event.preventDefault()\n    // try {\n    //   await __RegisterUser(this.state)\n    //   this.props.history.push('/signin')\n    // } catch (error) {\n    //   console.log(error)\n    // }\n  }\n\n  const signInSubmit = async (event) => {\n    console.log(event)\n    // event.preventDefault()\n    // try {\n    //   const loginData = await __LoginUser(this.state)\n    //   console.log(loginData)\n    //   this.props.toggleAuthenticated(true, loginData.user, () =>\n    //     this.props.history.push('/main')\n    //   )\n    // } catch (error) {\n    //   this.setState({ formError: true })\n    // }\n  }\n\n  return (\n    <div>\n      <Link to=\"/\">\n        <Button color=\"#fce4ec\">Back</Button>\n      </Link>\n      <Container component=\"main\" maxWidth=\"xs\">\n        <CssBaseline />\n        <div className={classes.paper}>\n          <Avatar className={classes.avatar}>\n            <LockOutlinedIcon />\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h5\">\n            Sign in\n        </Typography>\n          <form className={classes.form} noValidate>\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              id=\"email\"\n              label=\"Email Address\"\n              name=\"email\"\n              autoComplete=\"email\"\n              autoFocus\n            />\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              name=\"password\"\n              label=\"Password\"\n              type=\"password\"\n              id=\"password\"\n              autoComplete=\"current-password\"\n            />\n            <div className={classes.buttonWrapper}>\n              <Button type=\"button\" onSubmit={signUpSubmit} variant=\"contained\" color=\"primary\" className={classes.submit}> Sign Up </Button>\n              <Button type=\"button\" onSubmit={signInSubmit} variant=\"contained\" color=\"primary\" className={classes.submit}> Sign In </Button>\n            </div>\n            <Box mt={5}>\n            </Box>\n          </form>\n        </div>\n        <Box mt={8}>\n        </Box>\n      </Container>\n    </div>\n  );\n}\n\nexport default SignUpPage\n\n\n  // < div >\n  //     <Link to=\"/\">\n  //       <Button color=\"#fce4ec\">Back</Button>\n  //     </Link>\n  //     <Container component=\"main\" maxWidth=\"xs\">\n  //       <CssBaseline />\n  //       <div className={classes.paper}>\n  //         <Avatar className={classes.avatar}>\n  //           <LockOutlinedIcon />\n  //         </Avatar>\n  //         <Typography component=\"h1\" variant=\"h5\"> {isSigningUp ? \"Sign Up\" : \"Sign in\"} </Typography> \n  //         <form className={classes.form} noValidate>\n  //           {isSigningUp ? <TextField variant=\"outlined\" margin=\"normal\" required fullWidth id=\"username\" label=\"Choose Username\" name=\"username\" onChange={(e) => updateField(e, 'username')} autoFocus /> : null}\n  //           <TextField variant=\"outlined\" margin=\"normal\" required fullWidth id=\"email\" label=\"Email Address\" name=\"email\" autoComplete=\"email\" autoFocus onChange={(e) => updateField(e, 'email')} />\n  //           <TextField variant=\"outlined\" margin=\"normal\" required fullWidth id=\"password\" label={isSigningUp ? \"Choose Password\" : \"Password\"} name=\"password\" onChange={(e) => updateField(e, 'password')} autoComplete=\"current-password\" type=\"password\" autoFocus />\n  //           <FormControlLabel control={<Checkbox value=\"remember\" color=\"primary\" />} label=\"Remember me\" />\n  //           <Button type=\"button\" onClick={(e) => formSubmit(e)} fullWidth variant=\"contained\" color=\"primary\" className={classes.submit}>{isSigningUp ? \"CONFIRM AND SIGN IN\" : \"SIGN IN\"}</Button>\n  //           {!isSigningUp ? <Link href=\"#\" variant=\"body1\">{\"Don't have an account? Sign Up\"}</Link> : null}\n  //           <Box mt={5}>\n  //           </Box>\n  //         </form>\n  //       </div>\n  //       <Box mt={8}>\n  //       </Box>\n  //     </Container>\n  //   </div >","/Users/collindidier/Desktop/ga/portfolio-host/client/src/pages/SignInPage.js",["78","79"],"// import SignInSignUpForm from \"./subcomponents/SignInSignUpForm\"\nimport React from 'react';\nimport Avatar from '@material-ui/core/Avatar';\nimport Button from '@material-ui/core/Button';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport TextField from '@material-ui/core/TextField';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\n// import Link from '@material-ui/core/Link';\n// import Grid from '@material-ui/core/Grid';\nimport Box from '@material-ui/core/Box';\nimport LockOutlinedIcon from '@material-ui/icons/LockOutlined';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Container from '@material-ui/core/Container';\nimport { Link } from 'react-router-dom'\n\n// function Copyright() {\n//   return (\n//     <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n//       {'Copyright © '}\n//       <Link color=\"inherit\" href=\"https://material-ui.com/\">\n//         Your Website\n//       </Link>{' '}\n//       {new Date().getFullYear()}\n//       {'.'}\n//     </Typography>\n//   );\n// }\n\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    marginTop: theme.spacing(8),\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n  },\n  avatar: {\n    margin: theme.spacing(1),\n    backgroundColor: theme.palette.secondary.main,\n  },\n  form: {\n    width: '100%', // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n}));\n\n// const formSubmit = (e) => {\n//   e.target.push('/main');\n// }\n\nconst SignInPage = (props) => {\n  const classes = useStyles();\n\nconst signInSubmit = async (event) => {\n    console.log(event)\n    // event.preventDefault()\n    // try {\n    //   const loginData = await __LoginUser(this.state)\n    //   console.log(loginData)\n    //   this.props.toggleAuthenticated(true, loginData.user, () =>\n    //     this.props.history.push('/main')\n    //   )\n    // } catch (error) {\n    //   this.setState({ formError: true })\n    // }\n  }\n\n  return (\n    <div>\n      <Link to=\"/\">\n        <Button color=\"#fce4ec\">Back</Button>\n      </Link>\n      <Container component=\"main\" maxWidth=\"xs\">\n        <CssBaseline />\n        <div className={classes.paper}>\n          <Avatar className={classes.avatar}>\n            <LockOutlinedIcon />\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h5\">\n            Sign in\n        </Typography>\n          <form className={classes.form} noValidate>\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              id=\"email\"\n              label=\"Email Address\"\n              name=\"email\"\n              autoComplete=\"email\"\n              autoFocus\n            />\n            <TextField\n              variant=\"outlined\"\n              margin=\"normal\"\n              required\n              fullWidth\n              name=\"password\"\n              label=\"Password\"\n              type=\"password\"\n              id=\"password\"\n              autoComplete=\"current-password\"\n            />\n            <div className={classes.buttonWrapper}>\n              <Button type=\"button\" onSubmit={signInSubmit} variant=\"contained\" color=\"primary\" className={classes.submit}> Sign In </Button>\n            </div>\n            <Box mt={5}>\n            </Box>\n          </form>\n        </div>\n        <Box mt={8}>\n        </Box>\n      </Container>\n    </div>\n  );\n}\n\nexport default SignInPage","/Users/collindidier/Desktop/ga/portfolio-host/client/src/pages/PortfolioPage.js",[],"/Users/collindidier/Desktop/ga/portfolio-host/client/src/pages/LandingPage.js",["80"],"import React, {useState } from 'react';\nimport { Link } from 'react-router-dom'\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\n// import IconButton from '@material-ui/core/IconButton';\n// import MenuIcon from '@material-ui/icons/Menu';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginRight: theme.spacing(2),\n  },\n  title: {\n    flexGrow: 1,\n  },\n  textGreeting: {\n    display: \"block\",\n    marginLeft: \"5vw\",\n    alignText: \"left\",\n    welcome: {\n      fontSize: \"35px\"\n    },\n    subHeader: {\n      fontSize: \"20px\"\n    }\n  },\n  httpTest: {\n    margin: \"0 auto\",\n    marginTop: \"70px\",\n    width: \"300px\",\n    height: \"50px\",\n    display: \"flex\", \n    justifyContent: \"spaceBetween\",\n    textfield: {\n      width: \"60%\", \n      height: \"80px\", \n      backgroundColor: \"white\",\n      border: \"1px solid black\"\n    },\n    loginButton: {\n      display: \"block\",\n      margin: \"0 auto\", \n      width: \"80px\", \n      height: \"40px\",\n      fontSize: \"18px\"\n    },\n    submitTestButton: {\n      height: \"80px\",\n      width: \"80px\",\n      color: \"black\",\n      backgroundColor: \"white\"\n    }\n  }\n}));\n\n\nconst LandingPage = (props) => {\n  // const {httpRequest, get, put, post} = props\n  const classes = useStyles();\n  const [anchorEl, setAnchorEl] = useState(null);\n  // const [displayedProfiles, setProfiles] = useState([])\n  const [searchValue, setSearchField] = useState(\"\")\n  // const useEffect = () => {\n    // console.log(\"useEffect reached\")\n    // setProfiles(httpRequest(\"ReadAllProfiles\"))\n\n    // const getProfiles = async () => {\n    //   if (!pageIsLoaded) {\n    //     changeLoadedBoolean(true)\n    //   }\n    // }\n\n  const handleClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <div>\n      <div className={classes.root}>\n        <AppBar position=\"static\">\n          <Toolbar>\n            <Button aria-controls=\"simple-menu\" aria-haspopup=\"true\" onClick={handleClick}> Menu </Button>\n            <Menu id=\"simple-menu\" anchorEl={anchorEl} keepMounted open={Boolean(anchorEl)} onClose={handleClose} >\n              <Link to=\"/account\">\n              <MenuItem onClick={handleClose}> Login </MenuItem>\n              </Link>\n              <Link to=\"/portfolio\">\n              <MenuItem onClick={handleClose}>My account</MenuItem>\n              </Link>\n              <Link to=\"/main\">\n              <MenuItem onClick={handleClose}>Home</MenuItem>\n              </Link>\n            </Menu>\n            <Typography variant=\"h6\" className={classes.title}>DevPortal</Typography>\n            {/** LINK TO SignInSignUp page. <Link /> can accept props to send if need be**/}\n            <Link to=\"/account\">\n              <Button color=\"#fce4ec\">Login</Button>\n            </Link>\n          </Toolbar>\n        </AppBar>\n      </div>\n      <div className={classes.textGreeting}>\n        <h3 className={classes.textGreeting.welcome}>Welcome to Dev Ports</h3>\n        <h4 className={classes.textGreeting.subHeader}>Your site to easy share your portfolio and make new connection with other developers.</h4>\n      </div>\n      <Link className={classes.loginButton} to=\"/account\">\n        <Button variant=\"outlined\" color=\"primary\">Login</Button>\n      </Link>\n      <div className={classes.httpTest}>\n        <input className={classes.httpTest.textfield} onChange={(e)=>setSearchField(e.target.value)}></input>\n        {/* <button className={classes.httpTest.submitTestButton} onClick={()=>httpRequest(\"createProfile\", {body:{}} )}>Submit httpRequest</button> */}\n      </div>\n\n\n    </div>\n  );\n}\n\nexport default LandingPage\n\n// const HomePage = ()  => {\n//   return(\n// <div>\n// <h3>\n//   Welcome to Dev Ports\n// </h3>\n// <h4>\n//   Your site to easy share your portfolio and make new connection with other developers.\n// </h4>\n// <Link to=\"/login\">\n//   <Button variant=\"outlined\" color=\"primary\">\n//     Login\n// </Button>\n// </Link>\n//   <Link to=\"/signup\">\n//     <Button variant=\"outlined\" color=\"primary\">\n//       Sign up\n// </Button>\n//   </Link>\n// </div>\n//   )\n// }\n\n// export default HomePage\n","/Users/collindidier/Desktop/ga/portfolio-host/client/src/pages/subcomponents/imageloadtestLuis.js",["81","82"],"import React, { useState } from 'react';\n\nconst LoadImage = (props) => {\n    const [picture, setPicture] = useState(null);\n    const [imgData, setImgData] = useState(null);\n    const onChangePicture = e => {\n      if (e.target.files[0]) {\n        console.log(\"picture: \", e.target.files);\n        setPicture(e.target.files[0]);\n        const reader = new FileReader();\n        reader.addEventListener(\"load\", () => {\n          setImgData(reader.result);\n        });\n        reader.readAsDataURL(e.target.files[0]);\n      }\n    };\n    return (\n      <div className=\"register_wrapper\">\n        <div className=\"register_player_column_layout_one\">\n          <div className=\"register_player_Twocolumn_layout_two\">\n            <form className=\"myForm\">\n              <div className=\"formInstructionsDiv formElement\">\n                <h2 className=\"formTitle\">Sign Up</h2>\n                <p className=\"instructionsText\" />\n                <div className=\"register_profile_image\">\n                  <input id=\"profilePic\" type=\"file\" onChange={onChangePicture} />\n                </div>\n                <div className=\"previewProfilePic\">\n                  <img className=\"playerProfilePic_home_tile\" src={imgData} />\n                </div>\n              </div>\n              <div className=\"fillContentDiv formElement\">\n                <div className=\"names formContentElement\">\n                  <input\n                    className=\"inputRequest \"\n                    type=\"text\"\n                    placeholder=\"First Name\"\n                  />\n                  <input\n                    className=\"inputRequest \"\n                    type=\"text\"\n                    placeholder=\"Last Name\"\n                  />\n                </div>\n              </div>\n              <div className=\"submitButtonDiv formElement\">\n                <button className=\"submitButton\">Register</button>\n              </div>\n            </form>\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n\nexport default LoadImage ","/Users/collindidier/Desktop/ga/portfolio-host/client/src/pages/subcomponents/ProfileCard.js",[],"/Users/collindidier/Desktop/ga/portfolio-host/client/src/pages/SignInSignUpPage.js",["83","84","85","86"],{"ruleId":"87","severity":1,"message":"88","line":24,"column":11,"nodeType":"89","messageId":"90","endLine":24,"endColumn":20},{"ruleId":"87","severity":1,"message":"91","line":1,"column":17,"nodeType":"89","messageId":"90","endLine":1,"endColumn":25},{"ruleId":"87","severity":1,"message":"92","line":1,"column":27,"nodeType":"89","messageId":"90","endLine":1,"endColumn":36},{"ruleId":"93","replacedBy":"94"},{"ruleId":"95","replacedBy":"96"},{"ruleId":"87","severity":1,"message":"97","line":263,"column":47,"nodeType":"89","messageId":"90","endLine":263,"endColumn":57},{"ruleId":"87","severity":1,"message":"98","line":274,"column":25,"nodeType":"89","messageId":"90","endLine":274,"endColumn":33},{"ruleId":"87","severity":1,"message":"92","line":1,"column":27,"nodeType":"89","messageId":"90","endLine":1,"endColumn":36},{"ruleId":"87","severity":1,"message":"99","line":77,"column":11,"nodeType":"89","messageId":"90","endLine":77,"endColumn":22},{"ruleId":"87","severity":1,"message":"100","line":77,"column":24,"nodeType":"89","messageId":"90","endLine":77,"endColumn":27},{"ruleId":"87","severity":1,"message":"101","line":77,"column":29,"nodeType":"89","messageId":"90","endLine":77,"endColumn":32},{"ruleId":"87","severity":1,"message":"102","line":77,"column":34,"nodeType":"89","messageId":"90","endLine":77,"endColumn":38},{"ruleId":"87","severity":1,"message":"103","line":80,"column":10,"nodeType":"89","messageId":"90","endLine":80,"endColumn":27},{"ruleId":"87","severity":1,"message":"104","line":80,"column":29,"nodeType":"89","messageId":"90","endLine":80,"endColumn":40},{"ruleId":"87","severity":1,"message":"105","line":81,"column":10,"nodeType":"89","messageId":"90","endLine":81,"endColumn":21},{"ruleId":"87","severity":1,"message":"106","line":81,"column":23,"nodeType":"89","messageId":"90","endLine":81,"endColumn":37},{"ruleId":"87","severity":1,"message":"107","line":83,"column":12,"nodeType":"89","messageId":"90","endLine":83,"endColumn":19},{"ruleId":"87","severity":1,"message":"108","line":7,"column":8,"nodeType":"89","messageId":"90","endLine":7,"endColumn":24},{"ruleId":"87","severity":1,"message":"109","line":8,"column":8,"nodeType":"89","messageId":"90","endLine":8,"endColumn":16},{"ruleId":"87","severity":1,"message":"110","line":55,"column":7,"nodeType":"89","messageId":"90","endLine":55,"endColumn":17},{"ruleId":"87","severity":1,"message":"108","line":7,"column":8,"nodeType":"89","messageId":"90","endLine":7,"endColumn":24},{"ruleId":"87","severity":1,"message":"109","line":8,"column":8,"nodeType":"89","messageId":"90","endLine":8,"endColumn":16},{"ruleId":"87","severity":1,"message":"105","line":69,"column":10,"nodeType":"89","messageId":"90","endLine":69,"endColumn":21},{"ruleId":"87","severity":1,"message":"111","line":4,"column":12,"nodeType":"89","messageId":"90","endLine":4,"endColumn":19},{"ruleId":"112","severity":1,"message":"113","line":29,"column":19,"nodeType":"114","endLine":29,"endColumn":79},{"ruleId":"87","severity":1,"message":"115","line":50,"column":26,"nodeType":"89","messageId":"90","endLine":50,"endColumn":42},{"ruleId":"87","severity":1,"message":"116","line":51,"column":10,"nodeType":"89","messageId":"90","endLine":51,"endColumn":22},{"ruleId":"87","severity":1,"message":"117","line":51,"column":24,"nodeType":"89","messageId":"90","endLine":51,"endColumn":33},{"ruleId":"87","severity":1,"message":"118","line":52,"column":26,"nodeType":"89","messageId":"90","endLine":52,"endColumn":45},"no-unused-vars","'useEffect' is assigned a value but never used.","Identifier","unusedVar","'useState' is defined but never used.","'useEffect' is defined but never used.","no-native-reassign",["119"],"no-negated-in-lhs",["120"],"'controller' is assigned a value but never used.","'logGroup' is assigned a value but never used.","'httpRequest' is assigned a value but never used.","'get' is assigned a value but never used.","'put' is assigned a value but never used.","'post' is assigned a value but never used.","'displayedProfiles' is assigned a value but never used.","'setProfiles' is assigned a value but never used.","'searchValue' is assigned a value but never used.","'setSearchField' is assigned a value but never used.","'FormRow' is defined but never used.","'FormControlLabel' is defined but never used.","'Checkbox' is defined but never used.","'formSubmit' is assigned a value but never used.","'picture' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'toggleAppDisplay' is assigned a value but never used.","'pageIsLoaded' is assigned a value but never used.","'setLoaded' is assigned a value but never used.","'toggleTwoButtonMode' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]